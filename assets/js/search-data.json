{
  
    
        "post0": {
            "title": "Training a 3D Unet to perform brain tumor segmentation (BraTS)",
            "content": "A compact introduction to 3D Unets for medical image segmentation. . For the past few months (since late January) I have been running a deep learning course for doctors (mainly aimed at (neuro)radiologists, neurosurgeons, psychiatrists, and other MDs who work with imaging on a daily basis). This course is part of the Certificate of Advanced Studies in Medical Imaging AI that we launched in conjunction with the Swiss Institute for Translational and Entrepreneurial Medicine last September: . twitter: https://twitter.com/mckinley_scan/status/1124297078857969664 . We&#39;ve primarily been working with the fastai library, for three main reasons. Number one, I&#39;m a big fan of Pytorch as a deep learning library, and fastai is built on top of Pytorch. Number two, fastai comes with an awesome online course which several of our students have already tapped into as an additional resource. Finally, fastai makes things like learning rate tuning, and transfer learning really easy. . One of the primary problems we looked at in our course is medical image segmentation (it&#39;s also the topic I&#39;m most heavily involved with in my research). Fastai has a really nice feature for image segmentation called Dynamic Unet, which makes it easy to leverage pretrained image classifiers for image segmentation. We&#39;ve (meaning both myself and the students) been really impressed by how well Dynamic Unets perform on medical imaging tasks. . One thing fastai doesn&#39;t do (yet?) is provide easy access to 3D segmentation models: to segment a 3D volume using fastai, we have to slice it into 2D images and then segment slice-by-slice. It&#39;s natural to ask if models which can incorporate 3D context perform substantially better than purely 2D models. While there are a huge number of models and model variations out there for volumetric segmentation, the research group at the DKFZ have had substantial success in the last few years applying a rather normal 3D Unet variant to a variety of segmentation tasks, an approach they call no-new-Unet. . This post/notebook . Throughout the course, I have been providing Jupyter notebooks to our students illustrating image classification and segmentation, using fastai and Google Colab. This approach has a number of advantages: Jupyter allows text, images and code to be freely mixed, and Colab allows students to run code without installing python on their own machine. . Colab even allows access to pretty beefy GPUs, if only for a limited amount of time, and this led me to the current post. A version of nnUnet took 2nd place in the 2018 BraTS challenge for Brain Tumor segmentation, losing out only to an entry from NVIDIA which used 32Gb GPUs to scale out their neural network far beyond what most participants could hope for. (Our own entry, DeepSCAN, was joint third that year, of which more in a future post). You can download nnUnet and train your own BraTS model: on my machine, with a fairly modern GPU, it takes 4-5 days for the network to conclude training, which is far in excess of what you can achieve in Colab. This post is an attempt to fit the training of a 3D Unet into Colab, adhering roughly to how training works in fastai (learning rate finding, one-cycle learning rate schedule). . It sort-of works. Each &#39;epoch&#39; of 1000 batches takes about half an hour, on a high RAM Colab instance (which has 4 CPU cores). Without babysitting your colab session or employing nefarious tactics to keep your session running, you&#39;ll only manage to train and validate a couple of epochs. Still, I think it&#39;s interesting and worth a try (especially as the main developer (Hi Fabian!) of nnUnet is apparently morally opposed to Jupyter Notebooks) . If you want to try it yourself, this blog post was generated from a Jupyter notebook (using fastpages that you can load into colab using the badge above. . The Data . The BraTS dataset is a collection of multi-modal Magnetic Resonance images of patients with a low- or high-grade glioma, derived from several hospitals, and the . %%capture #hide !mkdir BRATS_dkfz !wget http://mia-software.artorg.unibe.ch/CAS_zips/dkfz_uint.zip !unzip &#39;dkfz_uint.zip&#39; -d BRATS_dkfz !rm dkfz_uint.zip . We need some packages: batchgenerators (to build an efficient dataloader for 3D data with augmentations) and nnunet (to get a modern implementation of a 3D Unet, with patchwise application) . %%capture #hide !pip install --upgrade batchgenerators !pip install SimpleITK !pip install nnunet . Creating a dataloader . &lt;matplotlib.image.AxesImage at 0x7f70e77e76d8&gt; . def get_gradient_mask(batch): if GRADIENT_MASK_ZERO_VOXELS: return (batch[:,0] != 0.0).astype(np.float) else: return (np.ones_like(batch[:,0])).astype(np.float) . assert len(TARGET_LABEL_NAMES) == len(TARGET_LABEL_SETS) total_with_gradient = 0 total_positives = np.array([0,0,0]) for case in train: total_with_gradient += np.sum(get_gradient_mask(patient_volumes[case][np.newaxis])) total_positives += [np.sum(np.isin(patient_volumes[case][-1], x)) for x in TARGET_LABEL_SETS] label_prevalences = total_positives/total_with_gradient list(zip(label_prevalences,TARGET_LABEL_NAMES)) . [(0.005920891170929659, &#39;enhancing&#39;), (0.012426714782795903, &#39;tumor_core&#39;), (0.030403128185577867, &#39;whole_tumor&#39;)] . def make_target(gt): return np.concatenate([np.isin(gt,labelset).astype(np.float) for labelset in TARGET_LABEL_SETS], axis =1) . class BCE_from_logits(nn.modules.Module): def __init__(self): super(BCE_from_logits,self).__init__() def forward(self, input, target): #input = input.clamp(min = -1, max = 1) max_val = (-input).clamp(min=0) loss = input - input * target + max_val + ((-max_val).exp() + (-input - max_val).exp()).log() return loss class BCE_from_logits_focal(nn.modules.Module): def __init__(self, gamma): super(BCE_from_logits_focal,self).__init__() self.gamma = gamma def forward(self, input, target): #input = input.clamp(min = -1, max = 1) max_val = (-input).clamp(min=0) loss = input - input * target + max_val + ((-max_val).exp() + (-input - max_val).exp()).log() p = input.sigmoid() pt = (1-p)*(1-target) + p*target return ((1-pt).pow(self.gamma))*loss from nnunet.training.loss_functions.dice_loss import SoftDiceLossSquared dice_loss = SoftDiceLossSquared() . import os, sys #this helper function just redirects the print statments from nnUnet, which are quite verbose :-) class HiddenPrints: def __enter__(self): self._original_stdout = sys.stdout sys.stdout = open(os.devnull, &#39;w&#39;) def __exit__(self, exc_type, exc_val, exc_tb): sys.stdout.close() sys.stdout = self._original_stdout def apply_to_case(model, patient, soft_dice_weighting = 0, do_mirroring=False, patch_size=PATCH_SIZE, axes=[&#39;axial&#39;], size=(192,192)): model.eval() with torch.no_grad(): ensemble_logits = [] patient_data, patient_metadata = load_patient(patient, axis=&#39;axial&#39;) masks = pad_nd_image(patient_data[-1],patch_size) full_image, slicer = pad_nd_image(patient_data[:-1],patch_size, return_slicer=True) full_mask = make_target(masks[np.newaxis,np.newaxis])[0] gradient_mask = get_gradient_mask(full_image[np.newaxis,:]).astype(np.uint8)[0] for axis in axes: all_data, patient_metadata = load_patient(patient, axis=axis) image_data = pad_nd_image(all_data[:-1], patch_size) zero_mask = (image_data != 0).astype(np.uint8) image_data = image_data - np.array(patient_metadata[&#39;means&#39;])[:,np.newaxis,np.newaxis,np.newaxis] image_data = image_data/np.array(patient_metadata[&#39;sds&#39;])[:,np.newaxis,np.newaxis,np.newaxis] image_data = image_data * zero_mask with HiddenPrints(): output = unet.predict_3D(torch.from_numpy(image_data),do_mirroring=do_mirroring, patch_size=patch_size,tiled=True) output = output[2] if axis == &#39;coronal&#39;: output = np.swapaxes(output, 1,2) if axis == &#39;sagittal&#39;: output = np.swapaxes(output, 1,3) ensemble_logits.append(output) full_logit = np.mean(np.array(ensemble_logits),axis=0) return full_mask[slicer], full_logit[slicer] . class Average(object): def __init__(self): self.reset() def reset(self): self.sum = 0 self.count = 0 def update(self, val, n=1): self.sum += val self.count += n @property def avg(self): return self.sum / self.count . from torch.optim.lr_scheduler import _LRScheduler class ExponentialLR(_LRScheduler): &quot;&quot;&quot;Exponentially increases the learning rate between two boundaries over a number of iterations. Arguments: optimizer (torch.optim.Optimizer): wrapped optimizer. end_lr (float): the final learning rate. num_iter (int): the number of iterations over which the test occurs. last_epoch (int, optional): the index of last epoch. Default: -1. from https://github.com/davidtvs/pytorch-lr-finder/ &quot;&quot;&quot; def __init__(self, optimizer, end_lr, num_iter, last_epoch=-1): self.end_lr = end_lr self.num_iter = num_iter super(ExponentialLR, self).__init__(optimizer, last_epoch) def get_lr(self): curr_iter = self.last_epoch + 1 r = curr_iter / self.num_iter return [base_lr * (self.end_lr / base_lr) ** r for base_lr in self.base_lrs] . import copy def train_unet(net = None,num_epochs = 50, batches_per_train_epoch = 20, num_val_cases = 1, dice_weighting = DICE_WEIGHTING, lr_max = 0.0001, lr_min = 0.00000001, scheduler = &#39;one-cycle&#39;, lr_find = False, lr_find_steps = 100, evaluate = True): optimizer = optim.Adam(net.parameters(), lr=lr_max, weight_decay=0.00001) loader = tr_gen epochs_this_run = 0 lr_history = [] loss_history = [] if lr_find: num_epochs = 1 batches_per_train_epoch = lr_find_steps evaluate = False initial_model = copy.deepcopy(net.state_dict()) if lr_find: for param_group in optimizer.param_groups: param_group[&#39;lr&#39;] = lr_min schedule = ExponentialLR(optimizer, end_lr = lr_max, num_iter = lr_find_steps) elif scheduler == &#39;cosine&#39;: print(&#39;using per-epoch cosine annealing&#39;) for param_group in optimizer.param_groups: param_group[&#39;lr&#39;] = lr_max schedule = CosineAnnealingLR(optimizer, T_max = batches_per_train_epoch, eta_min=lr_min) else: print(&#39;using one-cycle&#39;) div_factor = 25 for param_group in optimizer.param_groups: param_group[&#39;lr&#39;] = lr_max/25 schedule = OneCycleLR(optimizer, max_lr = lr_max, epochs = num_epochs, steps_per_epoch = batches_per_train_epoch, div_factor = 25) for epoch in tqdm(range(0, num_epochs)): epochs_this_run = epochs_this_run+1 if scheduler == &#39;cosine&#39;: for param_group in optimizer.param_groups: param_group[&#39;lr&#39;] = lr_max schedule = CosineAnnealingLR(optimizer, T_max = batches_per_train_epoch, eta_min=lr_min) train_loss = Average() soft_dice_loss = Average() net.train() t = tqdm(range(batches_per_train_epoch),leave=True) for iter in t: lr_history.append(schedule.get_lr()) this_batch = tr_gen.next() images = this_batch[&#39;data&#39;] masks = this_batch[&#39;seg&#39;] zero_mask = (masks[:,0]==-1).astype(np.float) #images = images*(1-zero_mask)[:,np.newaxis] gradient_masks = get_gradient_mask(images) masks = torch.from_numpy(make_target(masks)) images = torch.from_numpy(images) gradient_masks = torch.from_numpy(gradient_masks) optimizer.zero_grad() outputs = net(Variable(images).cuda()) outputs = outputs[0]*gradient_masks.unsqueeze(1).cuda() total_loss = 0 masks = (masks).cuda(async=True) gradient_mask = (gradient_masks).cuda(async=True) loss = BCE_from_logits()(outputs,masks.cuda()) soft_dice = 1 + dice_loss(masks.cuda(), outputs.sigmoid()) total_loss = loss.sum() train_loss.update(total_loss.item(), torch.sum(gradient_mask != 0).item()) soft_dice_loss.update(soft_dice.item(), 1) eps=1e-10 total_loss = total_loss/(torch.sum(gradient_mask != 0.0) + eps) + soft_dice*dice_weighting outputs_prob = torch.sigmoid(outputs) total_loss.backward() optimizer.step() # optimizer2.step() train_loss.update(total_loss.item(), images.size(0)) loss_history.append(total_loss.item()) t.set_description(f&#39;Loss = {train_loss.avg:.4f}, {soft_dice_loss.avg:.4f}&#39;) schedule.step() #loss = (criterion(outputs, masks)[0] +(-logit_flip).exp()[0]).data.cpu().numpy() all_dices = [] if evaluate: val_loss = Average() val_dice_loss = Average() val_dice = [Average() for x in TARGET_LABEL_SETS] net.eval() result_summary = list() all_dices = [] for case in tqdm(range(num_val_cases), leave=False): patient = val[case] patient_data, patient_metadata = load_patient(patient, axis=&#39;axial&#39;) gradient_mask = get_gradient_mask(patient_data[:-1][np.newaxis,:]).astype(np.uint8)[0] mask, logit = apply_to_case(net,patient=patient, axes=[&#39;axial&#39;,&#39;sagittal&#39;,&#39;coronal&#39;]) logit = logit * np.expand_dims(gradient_mask,0) TP = np.sum(np.logical_and(logit&gt;0 , mask&gt;0), axis=(1,2,3)) FP = np.sum(np.logical_and(logit&gt;0 , mask==0), axis=(1,2,3)) FN = np.sum(np.logical_and(logit&lt;0 , mask&gt;0), axis=(1,2,3)) TN = np.sum(np.logical_and(logit&lt;0 , mask==0), axis=(1,2,3)) loss = BCE_from_logits()(torch.Tensor(logit), torch.Tensor(mask)).numpy() soft_dice = 1 + dice_loss(torch.Tensor(mask).unsqueeze(0), torch.Tensor(logit).unsqueeze(0).sigmoid()).numpy() val_loss.update(np.sum(loss), np.sum(gradient_mask != 0.0)) val_dice_loss.update(soft_dice, 1) epsilon = 0.000001 dices = (2*TP+epsilon)/(2*TP+FP+FN+epsilon) all_dices.append(dices) print(f&#39;Epoch = {epoch}, Dices &#39; , [f&#39;{x}:{y:.2f}&#39; for x, y in zip(TARGET_LABEL_NAMES, np.mean(all_dices, 0))], f&#39;BCE loss = {val_loss.avg:.2f}&#39;, f&#39;Dice loss = {val_dice_loss.avg:.2f}&#39;) if lr_find: print(&#39;restoring model&#39;) net.load_state_dict(initial_model) return net, all_dices, lr_history, loss_history . num_val_cases . 67 . unet = Generic_UNet(input_channels=4, base_num_features=12, num_classes=3, num_pool=4, num_conv_per_stage=2, feat_map_mul_on_downscale=2, conv_op=nn.Conv3d, norm_op=nn.InstanceNorm3d, norm_op_kwargs=None, dropout_op=nn.Dropout3d, dropout_op_kwargs=None, nonlin=nn.LeakyReLU,deep_supervision=False,final_nonlin = nn.Identity(), seg_output_use_bias=True) pytorch_total_params = sum(np.fromiter((p.numel() for p in unet.parameters()), int)) print(pytorch_total_params) unet = unet.cuda() pi = np.array(label_prevalences) new_bias = torch.from_numpy(-np.log(((1-pi)/pi))) unet.seg_outputs[-1].bias = torch.nn.Parameter(new_bias.float().cuda()) . 2321616 . unet.seg_outputs[-1].bias . Parameter containing: tensor([-5.1233, -4.3754, -3.4623], device=&#39;cuda:0&#39;, requires_grad=True) . tr_gen.restart() net, dices, lr_history, loss_history = train_unet(unet, NUM_EPOCHS,batches_per_train_epoch=1000, dice_weighting = DICE_WEIGHTING, lr_max=1e-1, lr_min=1e-8, lr_find = True, lr_find_steps = 500) . restoring model . unet.seg_outputs[-1].bias . Parameter containing: tensor([-5.1233, -4.3754, -3.4623], device=&#39;cuda:0&#39;, requires_grad=True) . from scipy.ndimage.filters import gaussian_filter1d ysmoothed = gaussian_filter1d(loss_history, sigma=8) plt.plot(lr_history, ysmoothed) plt.xscale(&#39;log&#39;) plt.ylim(np.min(ysmoothed),1.2*ysmoothed[0]) . (0.9385267580051575, 1.5159970592981469) . NUM_EPOCHS=4 net, dices, lr_history, loss_history = train_unet(unet, NUM_EPOCHS,batches_per_train_epoch=BATCHES_PER_EPOCH, dice_weighting = DICE_WEIGHTING, lr_max=1e-3,scheduler = &#39;one_cycle&#39;, num_val_cases = num_val_cases) . using one-cycle . /usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:51: FutureWarning: Using a non-tuple sequence for multidimensional indexing is deprecated; use `arr[tuple(seq)]` instead of `arr[seq]`. In the future this will be interpreted as an array index, `arr[np.array(seq)]`, which will result either in an error or a different result. . Epoch = 0, Dices [&#39;enhancing:0.53&#39;, &#39;tumor_core:0.51&#39;, &#39;whole_tumor:0.67&#39;] BCE loss = 0.11 Dice loss = 0.38 . plt.plot(lr_history) . [&lt;matplotlib.lines.Line2D at 0x7fe1e063fa20&gt;] . from scipy.ndimage.filters import gaussian_filter1d plt.plot(gaussian_filter1d(loss_history, sigma=100)) . [&lt;matplotlib.lines.Line2D at 0x7fe1e05d5d68&gt;] . tr_gen.restart() net, dices, lr_history, loss_history = train_unet(unet, NUM_EPOCHS,batches_per_train_epoch=1000, dice_weighting = DICE_WEIGHTING, lr_max=1e-2, lr_min=1e-8, lr_find = True, lr_find_steps = 500) . restoring model . ysmoothed = gaussian_filter1d(loss_history, sigma=8) plt.plot(lr_history, ysmoothed) plt.xscale(&#39;log&#39;) plt.ylim(np.min(ysmoothed),1.2*ysmoothed[0]) . (0.8449374649105074, 1.0851204469413152) . tr_gen.restart() NUM_EPOCHS=4 net, dices, lr_history, loss_history = train_unet(unet, NUM_EPOCHS,batches_per_train_epoch=BATCHES_PER_EPOCH, dice_weighting = DICE_WEIGHTING, lr_max=1e-4,scheduler = &#39;one_cycle&#39;, num_val_cases = num_val_cases) . using one-cycle . /usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:51: FutureWarning: Using a non-tuple sequence for multidimensional indexing is deprecated; use `arr[tuple(seq)]` instead of `arr[seq]`. In the future this will be interpreted as an array index, `arr[np.array(seq)]`, which will result either in an error or a different result. . Epoch = 0, Dices [&#39;enhancing:0.60&#39;, &#39;tumor_core:0.53&#39;, &#39;whole_tumor:0.75&#39;] BCE loss = 0.10 Dice loss = 0.34 Epoch = 1, Dices [&#39;enhancing:0.60&#39;, &#39;tumor_core:0.54&#39;, &#39;whole_tumor:0.75&#39;] BCE loss = 0.10 Dice loss = 0.34 Epoch = 2, Dices [&#39;enhancing:0.58&#39;, &#39;tumor_core:0.53&#39;, &#39;whole_tumor:0.75&#39;] BCE loss = 0.10 Dice loss = 0.34 Epoch = 3, Dices [&#39;enhancing:0.58&#39;, &#39;tumor_core:0.54&#39;, &#39;whole_tumor:0.76&#39;] BCE loss = 0.10 Dice loss = 0.33 . from scipy.ndimage.filters import gaussian_filter1d plt.plot(gaussian_filter1d(loss_history, sigma=100)) . [&lt;matplotlib.lines.Line2D at 0x7fe1e01a7358&gt;] .",
            "url": "https://rimckinley.github.io/DeepSCANblog/fastpages/jupyter/segmentation/2020/04/23/BraTS_3D__with_dice_loss_(nnUnet).html",
            "relUrl": "/fastpages/jupyter/segmentation/2020/04/23/BraTS_3D__with_dice_loss_(nnUnet).html",
            "date": " • Apr 23, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebok Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # Title &gt; Awesome summary - toc:true- branch: master- badges: true- comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . #collapse-hide import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . #collapse-show cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # single-value selection over [Major_Genre, MPAA_Rating] pairs # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(movies).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(movies).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=alt.Y(&#39;IMDB_Rating:Q&#39;, axis=alt.Axis(minExtent=30)), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=600, height=400 ) . Example 3: More Tooltips . # select a point for which to provide details-on-demand label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=700, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; df = pd.read_json(movies) # display table with pandas df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://rimckinley.github.io/DeepSCANblog/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://rimckinley.github.io/DeepSCANblog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "My name is Richard. I do stuff. This is my blog. It concerns that stuff. . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://rimckinley.github.io/DeepSCANblog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

}